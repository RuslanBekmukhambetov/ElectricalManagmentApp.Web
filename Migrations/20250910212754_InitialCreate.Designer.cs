// <auto-generated />
using System;
using ElectricalManagmentApp.Web.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace ElectricalManagmentApp.Web.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250910212754_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.9");

            modelBuilder.Entity("ElectricalManagmentApp.Web.Models.Consumer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("AccountNumber")
                        .HasColumnType("TEXT");

                    b.Property<string>("Caption")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("Consumers");
                });

            modelBuilder.Entity("ElectricalManagmentApp.Web.Models.ElectricityMeter", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("InstallationDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MeterPointId")
                        .HasColumnType("TEXT");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("Type")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("MeterPointId")
                        .IsUnique();

                    b.ToTable("ElectricityMeters");
                });

            modelBuilder.Entity("ElectricalManagmentApp.Web.Models.MeterPoint", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Caption")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ConsumerId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("CurrentTransoformationRatio")
                        .HasColumnType("REAL");

                    b.Property<Guid>("ReadingsId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("VoltageTransoformationRatio")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("ConsumerId");

                    b.ToTable("MeterPoints");
                });

            modelBuilder.Entity("ElectricalManagmentApp.Web.Models.MeterReadings", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("Date")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("MeterPointId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("TEXT");

                    b.Property<double>("Value")
                        .HasColumnType("REAL");

                    b.HasKey("Id");

                    b.HasIndex("MeterPointId");

                    b.ToTable("MetersReadings");
                });

            modelBuilder.Entity("ElectricalManagmentApp.Web.Models.ElectricityMeter", b =>
                {
                    b.HasOne("ElectricalManagmentApp.Web.Models.MeterPoint", "MeterPoint")
                        .WithOne("ElectricityMeter")
                        .HasForeignKey("ElectricalManagmentApp.Web.Models.ElectricityMeter", "MeterPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeterPoint");
                });

            modelBuilder.Entity("ElectricalManagmentApp.Web.Models.MeterPoint", b =>
                {
                    b.HasOne("ElectricalManagmentApp.Web.Models.Consumer", "Consumer")
                        .WithMany("MeterPoints")
                        .HasForeignKey("ConsumerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Consumer");
                });

            modelBuilder.Entity("ElectricalManagmentApp.Web.Models.MeterReadings", b =>
                {
                    b.HasOne("ElectricalManagmentApp.Web.Models.MeterPoint", "MeterPoint")
                        .WithMany("Readings")
                        .HasForeignKey("MeterPointId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MeterPoint");
                });

            modelBuilder.Entity("ElectricalManagmentApp.Web.Models.Consumer", b =>
                {
                    b.Navigation("MeterPoints");
                });

            modelBuilder.Entity("ElectricalManagmentApp.Web.Models.MeterPoint", b =>
                {
                    b.Navigation("ElectricityMeter");

                    b.Navigation("Readings");
                });
#pragma warning restore 612, 618
        }
    }
}
